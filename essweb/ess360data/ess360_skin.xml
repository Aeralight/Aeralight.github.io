<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Mybuton -->
  <style name="IconMybuton"
         url="%FIRSTXML%/spots/hotspot_plan_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="9"
         framewidth="67"
         frameheight="67"
         stopspotsequence="false"
         crop="0|0|67|67"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconMybuton"
         onout="onoutIconMybuton"

         height="100"
         width="100"
         />

  <action name="onhoverIconMybuton">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconMybuton">
    hideTooltip();



  </action>



<!-- ********** -->
<!-- Simple Button -->
<!-- id : button -->
<!-- ********** -->

  <layer name="button"
         keep="true"
         url="%FIRSTXML%/graphics/button/pausebutton1.jpg" 
         align="bottom"
         x="0"
         y="50"
         zorder="1"
         visible="false"
         onclick="buttonOnClick"
         alpha="0.7"
         tooltip="buttontooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="500"
         />
  <action name="buttonOnClick">if(plugin[get(videointerface_video)] AND scene[get(xml.scene)].video == true,
	videointerface_togglepause();
);

  </action>

  <events name="buttonevents" 
    hidetourcontrols="hidebutton();" 
    showtourcontrols="showbutton();" 
    keep="true" />
  <action name="hidebutton">set(layer[button].visible, false);</action>
  <action name="showbutton">if(tour_displaycontrols,set(layer[button].visible, true);,hidebutton(););</action>


<!-- ********** -->
<!-- Video Control Bar -->
<!-- id : videoControlBar -->
<!-- ********** -->






	<events name="videoControlBar_events"
		onenterfullscreen.fullscreensupport="videoControlBar_fs_button_update(true);"
		onexitfullscreen.fullscreensupport="videoControlBar_fs_button_update(false);"

		onTourStart="set(layer[videoControlBar_footer].canstart, true);if(layer[videoControlBar_footer].isready,videoControlBar_show(););"
		videointerfaceready="videoControlBar_init_menu();set(layer[videoControlBar_footer].isready, true);if(layer[videoControlBar_footer].canstart,videoControlBar_show(););"
		onremovepano="videoControlBar_hide();"
		onpausevideointerface="videoControlBar_update_pausestate();"
		onplayvideointerface="videoControlBar_update_pausestate();"
		changetourlanguage="videoControlBar_update_language();"
		keep="true"
		/>


	<action name="videoControlBar_init_menu">
		ifnot(device.fullscreensupport,
			
			ifnot(videoControlBar_fullscreenoff,set(layer[videoControlBar_quality].x, calc(layer[videoControlBar_quality].x - 30)););
			set(videoControlBar_fullscreenoff, true);
		);
		set(videoControlBar_menuposx, 2);
		set(videoControlBar_menuposy, 40);
		videoControlBar_createmenu(qualitymenu, bottomright, 150, get(videoControlBar_menuposx), get(videoControlBar_menuposy));
		videoControlBar_setup_video_quality();
		set(plugin[get(videointerface_video)].current_videoscene_name, get(scene[get(xml.scene)].name));
	</action>

	<action name="videoControlBar_update_language">

if(videoControlBar_quality_counter GT 1,
	getmessage(quality_caption_high, videoControlBarquality_high_tip);
	getmessage(quality_caption_low, videoControlBarquality_low_tip);
	videoControlBar_updatemenuitem(qualitymenu, q1, get(quality_caption_high));
	videoControlBar_updatemenuitem(qualitymenu, q1, get(quality_caption_low));
	if(videoControlBar_current_videoscene_quality == 'low',
		videoControlBar_changequality_txt(get(quality_caption_low));
	,
		videoControlBar_changequality_txt(get(quality_caption_high));
	);
);
	</action>


	<action name="videoControlBar_show">
		if(scene[get(xml.scene)].video,
			set(videointerface_controlbar_update, 'videoControlBar_apply_timer');
			videoControlBar_show_header();
			videoControlBar_show_seekbar();
			videoControlBar_show_footer();
		);
	</action>
	<action name="videoControlBar_hide">
		videoControlBar_hide_header();
		videoControlBar_hide_seekbar();
		videoControlBar_hide_footer();
		
		videoControlBar_hidemenu(qualitymenu);
	</action>


	<layer name="videoControlBar_header"
		type="container"
		bgcolor="0x000000"
		bgalpha="0.7000076295109483"
		align="lefttop"
		x="0"
		y="0"
		zorder="2"
		enabled="true"
		capture="true"
		visible="false"
		height="30"
		width="100%"
		keep="true"
		>
	</layer>
	<action name="videoControlBar_hide_header">
		set(layer[videoControlBar_header].visible, false);
	</action>
	<action name="videoControlBar_show_header">
		set(layer[videoControlBar_header].visible, true);
	</action>


	<layer name="videoControlBar_footer"
		type="container"
		bgcolor="0x000000"
		bgalpha="0.7000076295109483"
		align="bottomleft"
		x="0"
		y="0"
		zorder="2"
		enabled="true"
		capture="false"
		visible="false"
		height="30"
		width="100%"
		keep="true"
		>


		<layer name="videoControlBar_pp_button"
			style="videoControlBar_baseimage|videoControlBar_over" crop="0|0|30|30"
			align="bottomleft" x="0" y="0" zorder="1" width="30" height="30"
			onclick="videoControlBar_togglepause();"
			tooltip="videoControlBarplay_tip"
			/>

		<layer name="videoControlBar_snd_button"
			style="videoControlBar_baseimage|videoControlBar_over" crop="210|0|30|30"
			align="bottomleft" x="30" y="0" zorder="1" width="30" height="30"
			onclick="videoControlBar_togglesound();"
			tooltip="videoControlBarsound_mute_tip"
			/>


		<layer name="videoControlBar_timer"
			style="videoControlBar_timertxt_base" 
			x="65" y="0" zorder="1"
			html=""
			onautosized="videoControlBar_changetotaltime_pos();"
			/>

		<layer name="videoControlBar_timer_total"
			style="videoControlBar_timertxt_base" 
			x="65" y="0" zorder="1"
			baseposx="65"
			html=""
			/>


		<layer name="videoControlBar_fs_button" devices="fullscreensupport"
			style="videoControlBar_baseimage|videoControlBar_over" crop="60|0|30|30"
			align="bottomright" x="0" y="0" zorder="1" width="30" height="30"
			fs_state="false"
			onclick="videoControlBar_hidemenu(qualitymenu);if(fs_state == false,enterFullscreen();
,exitFullscreen();
);"
			tooltip="videoControlBarfullscreen_open_tip"
			/>



		<layer name="videoControlBar_quality" devices="panovideosupport"
			type="container" width="10" height="30"
			align="bottomright" x="35" y="0" zorder="1"
			>
				<layer name="videoControlBar_quality_button_txt"
					style="videoControlBar_menutxt_base|videoControlBar_menutxt_normal" 
					align="bottomright" x="0" y="0" zorder="2"
					html=""
					onclick="videoControlBar_toggle_qualitymenu();"
					onautosized="videoControlBar_changequality_pos();"
					/>

				<layer name="videoControlBar_quality_button"
					style="videoControlBar_qualityimage" width="10" height="prop"
					align="right" x="0" y="0" zorder="2"
					onclick="videoControlBar_toggle_qualitymenu();"
					tooltip="videoControlBarquality_tip"
					onhover="videoControlBar_btntooltip_show();"
					onout="videoControlBar_btntooltip_hide();"
					/>
		</layer>

	</layer>
	<action name="videoControlBar_hide_footer">
		set(layer[videoControlBar_footer].visible, false);
	</action>
	<action name="videoControlBar_show_footer">
		set(layer[videoControlBar_footer].visible, true);
	</action>


	<layer name="videoControlBar_btntooltip"
		style="videoControlBar_tooltiptxt_base" 
		zorder="3"
		html=""
		edge="center"
		visible="false"
		keep="true"
		xoffset="0"
		yoffset="0"
		/>
	<action name="videoControlBar_btntooltip_show">
		if(tooltip,
			showTooltip('plugin', videoControlBar_btntooltip, bottom);
		);
	</action>
	<action name="videoControlBar_btntooltip_hide">
		hideTooltip();
	</action>


	<layer name="videoControlBar_seekbar"
		type="container"
		bgcolor="0x000000"
		bgalpha="0.7000076295109483"
		align="bottomleft"
		x="0"
		y="30"
		zorder="3"
		enabled="true"
		capture="true"
		bgcapture="true"
		visible="true"
		height="10"
		width="100%"
		ondown="if(plugin[get(videointerface_video)].isvideoready, asyncloop(pressed, videoControlBar_seekbar_seeking() ); );"
		onup="if(plugin[get(videointerface_video)].isvideoready, plugin[get(videointerface_video)].seek(get(seekpos_percent_text)); );"

		onhover="videoControlBar_timetooltip_show();"
		onout="videoControlBar_timetooltip_hide();"

		keep="true"
		>


		<layer name="videoControlBar_timetooltip"
			style="videoControlBar_tooltiptxt_base" 
			x="0" y="18" zorder="2"
			html=""
			tooltip=""
			edge="center"
			visible="false"
			/>

		<layer name="videoControlBar_loader"
			type="container"
			bgcolor="0x64d2f5"
			bgalpha="0.50000762951094835"
			align="bottomleft"
			x="0"
			y="0"
			zorder="1"
			enabled="false"
			capture="false"
			visible="true"
			height="10"
			width="0%"
			/>
		<layer name="videoControlBar_time"
			type="container"
			bgcolor="0x0094ca"
			bgalpha="1"
			align="bottomleft"
			x="0"
			y="0"
			zorder="2"
			enabled="false"
			capture="false"
			visible="true"
			height="10"
			width="0%"
			/>
	</layer>
	<action name="videoControlBar_hide_seekbar">
		<!-- set(layer[videoControlBar_seekbar].y, 0); -->
		set(layer[videoControlBar_seekbar].visible, false);
	</action>
	<action name="videoControlBar_show_seekbar">
		<!-- set(layer[videoControlBar_seekbar].y, 30); -->
		set(layer[videoControlBar_seekbar].visible, true);
	</action>


	<action name="videoControlBar_seekbar_seeking">
		screentolayer(videoControlBar_seekbar, mouse.stagex, mouse.stagey, lx, ly);
		div(seekpos, lx, layer[videoControlBar_seekbar].pixelwidth);
		mul(seekpos_percent, seekpos, 100);
		clamp(seekpos_percent, 0, 100);
		txtadd(seekpos_percent_text, get(seekpos_percent), '%');
	</action>

	<action name="videoControlBar_timetooltip_show">
		screentolayer(videoControlBar_seekbar, mouse.stagex, mouse.stagey, lx, ly);
		div(tooltippos, lx, layer[videoControlBar_seekbar].pixelwidth);
		mul(tooltippos_percent, tooltippos, 100);
		clamp(tooltippos_percent, 0, 100);

		copy(vpc, plugin[get(videointerface_video)]);
		if(vpc AND vpc.loaded AND vpc.isvideoready AND vpc.isseeking == false,
			copy(tt, vpc.totaltime);

			mul(ttime, tooltippos_percent, tt);
			div(ttime, 100);

			videoControlBar_format_sec_to_hhmmss(ttime, layer[videoControlBar_timetooltip].html, false);
			
			set(layer[videoControlBar_timetooltip].x, get(lx));
			set(layer[videoControlBar_timetooltip].visible, true);
		);
		delete(vpc);
	</action>
	<action name="videoControlBar_timetooltip_hide">
		set(layer[videoControlBar_timetooltip].visible, false);
	</action>



	<action name="videoControlBar_fs_button_update" devices="fullscreensupport">
		if (%1,
			set(layer[videoControlBar_fs_button].fs_state, true);
			set(layer[videoControlBar_fs_button].crop, 90|0|30|30);
			set(layer[videoControlBar_fs_button].tooltip,'videoControlBarfullscreen_close_tip');
		,
			set(layer[videoControlBar_fs_button].fs_state, false);
			set(layer[videoControlBar_fs_button].crop, 60|0|30|30);
			set(layer[videoControlBar_fs_button].tooltip,'videoControlBarfullscreen_open_tip');
		);
	</action>


	<action name="videoControlBar_createmenu">
		set(name_w, 'videoControlBar_%1_window');
		set(name_m, 'videoControlBar_%1_menu');
		addlayer(get(name_w));
		addlayer(get(name_m));
		copy(layer_w, layer[get(name_w)]);
		copy(layer_m, layer[get(name_m)]);

		set(layer_w.parent, 'videoControlBar_footer');
		set(layer_w.type, container);
		set(layer_w.maskchildren, true);
		set(layer_w.align, %2);
		set(layer_w.width, %3);
		set(layer_w.height, 0);
		set(layer_w.x, %4);
		set(layer_w.y, %5);
		set(layer_w.bgcolor, 0x000000);
		set(layer_w.bgalpha, 0.7000076295109483);
		set(layer_w.visible, false);

		set(layer_m.state, 'closed');
		set(layer_m.parent, get(name_w));
		set(layer_m.type, container);
		set(layer_m.maskchildren, true);
		set(layer_m.align, lefttop);
		sub(layer_m.width, %3, 12);
		set(layer_m.height, 6);
		set(layer_m.x, 6);
		set(layer_m.y, 6);
	</action>


	<action name="videoControlBar_addmenuitem">
		set(name_w, 'videoControlBar_%1_window');
		set(name_m, 'videoControlBar_%1_menu');
		set(name_i, 'videoControlBar_%1_menuitem_%2');
		addlayer(get(name_i));
		copy(layer_w, layer[get(name_w)]);
		copy(layer_m, layer[get(name_m)]);
		copy(layer_i, layer[get(name_i)]);

		set(layer_i.parent, get(name_m));
		sub(layer_i.y, layer_m.height, 6);

		set(caption, %3);
		set(method, %4);

		if(caption,
			set(layer_i.html, %3);
			layer_i.loadstyle(videoControlBar_menuitem_base|videoControlBar_menuitem_normal);
			add(layer_m.height, 26);
			add(layer_w.height, layer_m.height, 6);
		,
			add(layer_i.y, 6);
			set(layer_i.width, 100%);
			set(layer_i.height, 1);
			set(layer_i.type, container);
			set(layer_i.bgalpha, 1.0);
			set(layer_i.bgcolor, 0xFFFFFF);
			add(layer_m.height, 13);
			add(layer_w.height, layer_m.height, 6);
		);
		if(method,
			set(layer_i.onclick, %4);
		);
		delete(caption, method, name_w, name_m, name_i, layer_i);
	</action>


	<action name="videoControlBar_updatemenuitem">
		set(name_i, 'videoControlBar_%1_menuitem_%2');
		addlayer(get(name_i));
		copy(layer_i, layer[get(name_i)]);

		set(caption, %3);

		if(caption,
			set(layer_i.html, %3);
			<!--
			layer_i.loadstyle(videoControlBar_menuitem_base|videoControlBar_menuitem_normal);
			-->
		);
		delete(caption, name_i, layer_i);
	</action>


	<action name="videoControlBar_selectmenuitem">
		set(name_i, 'videoControlBar_%1_menuitem_%2');
		copy(layer_i, layer[get(name_i)]);
		if(layer_i,
			if(%3 !== false,
				layer_i.loadstyle(videoControlBar_menuitem_selected);
			,
				layer_i.loadstyle(videoControlBar_menuitem_normal);
			);
		);
		delete(name_i);
	</action>


	<action name="videoControlBar_deselectmenuitem">
		videoControlBar_selectmenuitem(%1, %2, false);
	</action>



	<action name="videoControlBar_toggle_qualitymenu">
		if(layer[videoControlBar_qualitymenu_menu].state == 'closed',
			videoControlBar_showmenu(qualitymenu);
		,
			videoControlBar_hidemenu(qualitymenu);
		);
	</action>


	<action name="videoControlBar_showmenu">
		set(layer[videoControlBar_%1_menu].state, 'opened');
		set(layer[videoControlBar_%1_window].visible, true);
		
		delayedcall(videoControlBar_quality_stop, 4.0, videoControlBar_hidemenu(qualitymenu););
	</action>


	<action name="videoControlBar_hidemenu">
		
		stopdelayedcall(videoControlBar_quality_stop);
		set(layer[videoControlBar_%1_menu].state, 'closed');
		set(layer[videoControlBar_%1_window].visible, false);
	</action>


	<style name="videoControlBar_baseimage" url="%FIRSTXML%/graphics/videocontrolbar/videointerface_skin_kolor.png" />
	<style name="videoControlBar_qualityimage" url="%FIRSTXML%/graphics/videocontrolbar/quality_skin_kolor.png" />


	<style name="videoControlBar_timertxt_base" url="%FIRSTXML%/graphics/textfield.swf" align="bottomleft" vcenter="true" autowidth="true" 
		height="30" padding="0" background="false" capture="false" enabled="false" border="false" 
		css="text-align:left;color:#ffffff;font-family:Arial;font-size:16px;" />

	<style name="videoControlBar_tooltiptxt_base" url="%FIRSTXML%/graphics/textfield.swf" align="bottomleft" vcenter="true" autowidth="true" 
		height="14" padding="0 2" roundedge="2" 
		 background="true" backgroundcolor="0xeeeeee" backgroundalpha="1"
		 border="false"
		
		capture="false" enabled="false" 
		css="text-align:left;color:#000000;font-family:Arial;font-weight:bold;font-size:11px;" />




	<style name="videoControlBar_menutxt_base" url="%FIRSTXML%/graphics/textfield.swf" align="bottomright" x="0" vcenter="true" autowidth="true" 
		height="30" padding="0 0 0 5" background="false" border="false" 
		onover="loadstyle(videoControlBar_menutxt_over);" onout="loadstyle(videoControlBar_menutxt_normal);" 
		ondown.touch="onover();" onup.touch="onout();" />
	<style name="videoControlBar_menutxt_normal" enabled="true" alpha="1.0" 
		css="text-align:right; color:#ffffff;font-family:Arial;font-size:16px;" />
	<style name="videoControlBar_menutxt_over" enabled="true" alpha="1.0" 
		css="text-align:right; color:#007daa;font-family:Arial;font-size:16px;" />
	<style name="videoControlBar_menuitem_base" url="%FIRSTXML%/graphics/textfield.swf" align="lefttop" x="0" vcenter="true" 
		width="138" height="26" padding="0 3" background="false" backgroundcolor="0x007daa" backgroundalpha="1.0" border="false" 
		onover="set(background,true);" onout="set(background,false);" ondown.touch="onover();" onup.touch="onout();" />
	<style name="videoControlBar_menuitem_normal" textshadow="0.0" enabled="true" alpha="1.0" 
		css="text-align:left; color:#ffffff;font-family:Arial;font-size:16px;" />
	<style name="videoControlBar_menuitem_selected" textshadow="0.01" enabled="true" alpha="1.0" 
		css="text-align:left; color:#007daa;font-family:Arial;font-size:16px;" />


	<action name="videoControlBar_changequality_pos">
		set(layer[videoControlBar_quality_button].x, get(layer[videoControlBar_quality_button_txt].width));
		set(layer[videoControlBar_quality].width, get(layer[videoControlBar_quality_button_txt].width));
		add(layer[videoControlBar_quality].width, 15);
	</action>
	<action name="videoControlBar_changequality_txt">
		set(layer[videoControlBar_quality_button_txt].html, %1);
	</action>

	<action name="videoControlBar_changetotaltime_pos">
		set(layer[videoControlBar_timer_total].x, get(layer[videoControlBar_timer].width));
		add(layer[videoControlBar_timer_total].x, get(layer[videoControlBar_timer_total].baseposx));
	</action>



	<style name="videoControlBar_over"
		ondown="videoControlBar_buttonover(get(name));"
		onhover="videoControlBar_btntooltip_show();"
		onover="videoControlBar_buttonover(get(name));"
		onout="videoControlBar_buttonover(null);videoControlBar_btntooltip_hide();"
		/>
	<action name="videoControlBar_buttonover">
		set(skin_newover_bt, %1);
		set(skin_newover_part2, '');

		indexoftxt(skin_overpos1, get(crop), '|');
		subtxt(skin_over_part1, get(crop), 0, get(skin_overpos1));
		inc(skin_overpos1);
		subtxt(skin_over1, get(crop), get(skin_overpos1), 8);
		indexoftxt(skin_overpos2, get(skin_over1), '|');
		subtxt(skin_newover_part2, get(skin_over1), 0, 2);
		txtreplace(skin_newover_part2, '|', '');
		inc(skin_overpos2);
		subtxt(skin_over2, get(skin_over1), get(skin_overpos2), 8);

		if(%1 != null,
			txtadd(skin_newover, get(skin_over_part1), '|30|', get(skin_over2));
		,
			txtadd(skin_newover, get(skin_over_part1), '|0|', get(skin_over2));
		);
		set(crop, get(skin_newover));
		delete(skin_newover, skin_over_part1, skin_over2, skin_over1, skin_overpos2, skin_overpos1);
	</action>


	<action name="videoControlBar_format_sec_to_hhmmss">
		copy(t,%1);
		div(hh,get(t),3600);
		Math.floor(hh);
		roundval(hh);
		div(mm,t,60);
		mod(mm,60);
		Math.floor(mm);
		roundval(mm);
		copy(ss,t);
		mod(ss,60);
		Math.floor(ss);
		roundval(ss);
		if(hh GT 0, if(mm LT 10, txtadd(mm, '0', get(mm)); ); );
		if(ss LT 10, txtadd(ss, '0', get(ss)); );
		txtadd(ft, get(mm),':',get(ss));
		if(hh GT 0, txtadd(ft,get(hh),':',get(ft)); );
		if(%3 == true, txtadd(ft,'&#x00A0;/&#x00A0;',get(ft)); );
		copy(%2,ft);
	</action>


<action name="videoControlBar_apply_timer">
	videoControlBar_format_sec_to_hhmmss(%1, layer[videoControlBar_timer].html, false);
	videoControlBar_format_sec_to_hhmmss(%2, layer[videoControlBar_timer_total].html, true);

	copy(layer[videoControlBar_loader].width, %3);
	copy(layer[videoControlBar_time].width, %4);
</action>


	<action name="videoControlBar_setup_video_quality">
		set(videoControlBar_quality_counter, 0);
		getmessage(quality_caption_high, videoControlBarquality_high_tip);
		videoControlBar_addmenuitem(qualitymenu, q1, get(quality_caption_high), videoControlBar_change_video_file(q1, get(quality_caption_high), get(scene[get(xml.scene)].scenevideourl), get(scene[get(xml.scene)].scenevideoposterurl), 'high'); );
		inc(videoControlBar_quality_counter);
		if(scene[get(xml.scene)].scenevideolowresurl != '',
			getmessage(quality_caption_low, videoControlBarquality_low_tip);
			videoControlBar_addmenuitem(qualitymenu, q2,  get(quality_caption_low), videoControlBar_change_video_file(q2, get(quality_caption_low), get(scene[get(xml.scene)].scenevideolowresurl), get(scene[get(xml.scene)].scenevideolowresposterurl), 'low'); ); 
			inc(videoControlBar_quality_counter);
		);
		
		if(videoControlBar_quality_counter GT 1,

			if(scene[get(xml.scene)].scenevideolowresurl != '' AND (device.html5 AND (device.mobile OR device.tablet OR device.safari)) AND scene[get(xml.scene)].name != plugin[get(videointerface_video)].current_videoscene_name,
				set(videoControlBar_current_videoscene_quality, 'low');
			);
			if(videoControlBar_current_videoscene_quality == 'low',
				videoControlBar_selectmenuitem(qualitymenu, q2);
				videoControlBar_changequality_txt(get(quality_caption_low));
			,
				videoControlBar_selectmenuitem(qualitymenu, q1);
				videoControlBar_changequality_txt(get(quality_caption_high));
			);
		,
			set(layer[videoControlBar_quality].visible, false);
		);
	</action>


	<action name="videoControlBar_change_video_file">
		plugin[get(videointerface_video)].playvideo(%3, %4, get(plugin[get(videointerface_video)].ispaused), get(plugin[get(videointerface_video)].time));
		videoControlBar_deselectmenuitem(qualitymenu, q1);
		videoControlBar_deselectmenuitem(qualitymenu, q2);
		videoControlBar_selectmenuitem(qualitymenu, %1);
		set(videoControlBar_current_videoscene_quality, %5);
		videoControlBar_hidemenu(qualitymenu);
		videoControlBar_changequality_txt(%2);
	</action>


	<action name="videoControlBar_togglepause">
		
		videoControlBar_hidemenu(qualitymenu);videointerface_togglepause();
	</action>


	<action name="videoControlBar_update_pausestate">
		if(plugin[get(videointerface_video)].ispaused,
			set(layer[videoControlBar_pp_button].tooltip, 'videoControlBarplay_tip');
			if(skin_newover_bt == 'videoControlBar_pp_button',
				txtadd(newcrop, '0|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_pp_button].crop, get(newcrop));
			,
				set(layer[videoControlBar_pp_button].crop, 0|0|30|30);
			);
		,
			set(layer[videoControlBar_pp_button].tooltip, 'videoControlBarpause_tip');
			if(skin_newover_bt == 'videoControlBar_pp_button',
				txtadd(newcrop, '30|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_pp_button].crop, get(newcrop));
			,
				set(layer[videoControlBar_pp_button].crop, 30|0|30|30);
			);
			if(layer[videoControlBar_splashscreen_image].visible,
				tween(layer[videoControlBar_splashscreen_image].alpha, 0.0, 0.25, default, 
					set(layer[videoControlBar_splashscreen_image].visible,false);
				);
			);
		);
		layer[videoControlBar_pp_button].onout();
		layer[videoControlBar_pp_button].onover();
	</action>


	<action name="videoControlBar_togglesound">
		
		videoControlBar_hidemenu(qualitymenu);
		videoControlBar_update_soundstate();
	</action>


	<action name="videoControlBar_update_soundstate">
		set(newcrop, '');
		set(snd_iconpos, 210);

		if(plugin[get(videointerface_video)].volume GT 0,
			if(plugin[get(videointerface_video)].volume LT 0.4,
				set(snd_iconpos, 180);
				add(plugin[get(videointerface_video)].volume, 0.33);
				set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_high_tip');
			,
				if(plugin[get(videointerface_video)].volume LT 0.7,
					add(plugin[get(videointerface_video)].volume, 0.33);
					set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_mute_tip');
				,
					set(snd_iconpos, 120);
					set(plugin[get(videointerface_video)].volume, 0);
					set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_low_tip');
				);
			);

			if(skin_newover_bt == 'videoControlBar_snd_button',
				txtadd(newcrop, get(snd_iconpos),'|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_snd_button].crop, get(newcrop));
			,
				txtadd(newcrop, get(snd_iconpos),'|0|30|30');
				set(layer[videoControlBar_snd_button].crop, get(newcrop));
			);

		,
			if(skin_newover_bt == 'videoControlBar_snd_button',
				txtadd(newcrop, '150|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_snd_button].crop, get(newcrop));
			,
				set(layer[videoControlBar_snd_button].crop, 150|0|30|30);
			);
			set(plugin[get(videointerface_video)].volume, 0.33);
			set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_medium_tip');
		);
		layer[videoControlBar_snd_button].onout();
		layer[videoControlBar_snd_button].onover();
		delete(newcrop, snd_iconpos);
	</action>

<!-- ********** -->
<!-- Simple Buttonback -->
<!-- id : button1 -->
<!-- ********** -->

  <layer name="button1"
         keep="true"
         url="%FIRSTXML%/graphics/button1/home2.jpg" 
         align="bottom"
         x="-570"
         y="50"
         zorder="4"
         visible="false"
         onclick="button1OnClick"
         alpha="0.7"
         tooltip="button1tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="button1OnClick">
          mainloadscene(pano128);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
hideTourControls();


  </action>

  <events name="button1events" 
    hidetourcontrols="hidebutton1();" 
    showtourcontrols="showbutton1();" 
    keep="true" />
  <action name="hidebutton1">set(layer[button1].visible, false);</action>
  <action name="showbutton1">if(tour_displaycontrols,set(layer[button1].visible, true);,hidebutton1(););</action>


<!-- ********** -->
<!-- Simple Buttonstart -->
<!-- id : button2 -->
<!-- ********** -->

  <layer name="button2"
         keep="true"
         url="%FIRSTXML%/graphics/button2/resetbutton3.jpg" 
         align="bottom"
         x="-330"
         y="50"
         zorder="5"
         visible="false"
         onclick="button2OnClick"
         alpha="0.7"
         tooltip="button2tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="button2OnClick">if(plugin[get(videointerface_video)] AND scene[get(xml.scene)].video == true,
	videointerface_seek(0);
);

  </action>

  <events name="button2events" 
    hidetourcontrols="hidebutton2();" 
    showtourcontrols="showbutton2();" 
    keep="true" />
  <action name="hidebutton2">set(layer[button2].visible, false);</action>
  <action name="showbutton2">if(tour_displaycontrols,set(layer[button2].visible, true);,hidebutton2(););</action>


<!-- ********** -->
<!-- Call actions on tour events1 -->
<!-- id : eventsPlugin -->
<!-- ********** -->

  <events name="eventsPluginevents" keep="true" onTourStart="eventsPluginontourstarts()"/>
  <action name="eventsPluginontourstarts">

    hideTourControls();


  </action>

<!-- ********** -->
<!-- Pause with Spacebar -->
<!-- id : PauseVideoSpaceBar -->
<!-- ********** -->


<events name="PauseVideoSpaceBarEvents" 
	keep="true" 
	onkeyup="if(keycode == 32,  if(scene[get(xml.scene)].video,   videointerface_togglepause();););" 
	/>

<!-- ********** -->
<!-- Simple Buttonback1 -->
<!-- id : button3 -->
<!-- ********** -->

  <layer name="button3"
         keep="true"
         url="%FIRSTXML%/graphics/button3/stopbutton2.jpg" 
         align="bottom"
         x="-450"
         y="50"
         zorder="8"
         visible="false"
         onclick="button3OnClick"
         alpha="0.7"
         tooltip="button3tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="button3OnClick">
          mainloadscene(pano19);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
hideTourControls();


  </action>

  <events name="button3events" 
    hidetourcontrols="hidebutton3();" 
    showtourcontrols="showbutton3();" 
    keep="true" />
  <action name="hidebutton3">set(layer[button3].visible, false);</action>
  <action name="showbutton3">if(tour_displaycontrols,set(layer[button3].visible, true);,hidebutton3(););</action>


<!-- ********** -->
<!-- Singlebuttonallfilms -->
<!-- id : buttonForASinglePano -->
<!-- ********** -->

  <layer name="buttonForASinglePano"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano/stopbutton2.jpg" 
         align="bottomleft"
         x="10"
         y="50"
         zorder="9"
         visible="false"
         onclick="buttonForASinglePanoOnClick"
         alpha="0.7"
         tooltip="buttonForASinglePanotooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePanoOnClick">
          mainloadscene(pano19);lookat(0.000000, 0.000000, 35.694400);


  </action>

  <events name="buttonForASinglePanoevents" 
    onTourStart="showbuttonForASinglePano();"

    onPanoStart="showbuttonForASinglePano();"

    keep="true" />
  <action name="hidebuttonForASinglePano">set(layer[buttonForASinglePano].visible, false);</action>
  <action name="showbuttonForASinglePano">
    set(displaythebutton_buttonForASinglePano, false);


    if (xml.scene == pano262, set(displaythebutton_buttonForASinglePano, true); );
    if (xml.scene == pano271, set(displaythebutton_buttonForASinglePano, true); );
    if (xml.scene == pano280, set(displaythebutton_buttonForASinglePano, true); );
    if (xml.scene == pano293, set(displaythebutton_buttonForASinglePano, true); );

    if (displaythebutton_buttonForASinglePano,
      set(layer[buttonForASinglePano].visible, true);
    ,
      hidebuttonForASinglePano();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonplayfilm1 -->
<!-- id : buttonForASinglePano1 -->
<!-- ********** -->

  <layer name="buttonForASinglePano1"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano1/playbutton2.jpg" 
         align="bottom"
         x="-220"
         y="50"
         zorder="10"
         visible="false"
         onclick="buttonForASinglePano1OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano1tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano1OnClick">
            mainloadscene(pano220);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
showTourControls();


  </action>

  <events name="buttonForASinglePano1events" 
    onTourStart="showbuttonForASinglePano1();"

    onPanoStart="showbuttonForASinglePano1();"

    keep="true" />
  <action name="hidebuttonForASinglePano1">set(layer[buttonForASinglePano1].visible, false);</action>
  <action name="showbuttonForASinglePano1">
    set(displaythebutton_buttonForASinglePano1, false);


    if (xml.scene == pano19, set(displaythebutton_buttonForASinglePano1, true); );

    if (displaythebutton_buttonForASinglePano1,
      set(layer[buttonForASinglePano1].visible, true);
    ,
      hidebuttonForASinglePano1();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonplayfilm2 -->
<!-- id : buttonForASinglePano2 -->
<!-- ********** -->

  <layer name="buttonForASinglePano2"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano2/playbutton2.jpg" 
         align="bottom"
         x="-75"
         y="50"
         zorder="11"
         visible="false"
         onclick="buttonForASinglePano2OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano2tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano2OnClick">
            mainloadscene(pano222);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
showTourControls();


  </action>

  <events name="buttonForASinglePano2events" 
    onTourStart="showbuttonForASinglePano2();"

    onPanoStart="showbuttonForASinglePano2();"

    keep="true" />
  <action name="hidebuttonForASinglePano2">set(layer[buttonForASinglePano2].visible, false);</action>
  <action name="showbuttonForASinglePano2">
    set(displaythebutton_buttonForASinglePano2, false);


    if (xml.scene == pano19, set(displaythebutton_buttonForASinglePano2, true); );

    if (displaythebutton_buttonForASinglePano2,
      set(layer[buttonForASinglePano2].visible, true);
    ,
      hidebuttonForASinglePano2();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonplayfilm3 -->
<!-- id : buttonForASinglePano3 -->
<!-- ********** -->

  <layer name="buttonForASinglePano3"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano3/playbutton2.jpg" 
         align="bottom"
         x="75"
         y="50"
         zorder="12"
         visible="false"
         onclick="buttonForASinglePano3OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano3tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano3OnClick">
            mainloadscene(pano224);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
showTourControls();


  </action>

  <events name="buttonForASinglePano3events" 
    onTourStart="showbuttonForASinglePano3();"

    onPanoStart="showbuttonForASinglePano3();"

    keep="true" />
  <action name="hidebuttonForASinglePano3">set(layer[buttonForASinglePano3].visible, false);</action>
  <action name="showbuttonForASinglePano3">
    set(displaythebutton_buttonForASinglePano3, false);


    if (xml.scene == pano19, set(displaythebutton_buttonForASinglePano3, true); );

    if (displaythebutton_buttonForASinglePano3,
      set(layer[buttonForASinglePano3].visible, true);
    ,
      hidebuttonForASinglePano3();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonplayfilm4 -->
<!-- id : buttonForASinglePano4 -->
<!-- ********** -->

  <layer name="buttonForASinglePano4"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano4/playbutton2.jpg" 
         align="bottom"
         x="220"
         y="50"
         zorder="13"
         visible="false"
         onclick="buttonForASinglePano4OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano4tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano4OnClick">
            mainloadscene(pano262);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
hideTourControls();


  </action>

  <events name="buttonForASinglePano4events" 
    onTourStart="showbuttonForASinglePano4();"

    onPanoStart="showbuttonForASinglePano4();"

    keep="true" />
  <action name="hidebuttonForASinglePano4">set(layer[buttonForASinglePano4].visible, false);</action>
  <action name="showbuttonForASinglePano4">
    set(displaythebutton_buttonForASinglePano4, false);


    if (xml.scene == pano19, set(displaythebutton_buttonForASinglePano4, true); );

    if (displaythebutton_buttonForASinglePano4,
      set(layer[buttonForASinglePano4].visible, true);
    ,
      hidebuttonForASinglePano4();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonback2menu -->
<!-- id : buttonForASinglePano5 -->
<!-- ********** -->

  <layer name="buttonForASinglePano5"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano5/home2.jpg" 
         align="bottomleft"
         x="10"
         y="50"
         zorder="14"
         visible="false"
         onclick="buttonForASinglePano5OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano5tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano5OnClick">
          mainloadscene(pano128);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
hideTourControls();


  </action>

  <events name="buttonForASinglePano5events" 
    onTourStart="showbuttonForASinglePano5();"

    onPanoStart="showbuttonForASinglePano5();"

    keep="true" />
  <action name="hidebuttonForASinglePano5">set(layer[buttonForASinglePano5].visible, false);</action>
  <action name="showbuttonForASinglePano5">
    set(displaythebutton_buttonForASinglePano5, false);


    if (xml.scene == pano15, set(displaythebutton_buttonForASinglePano5, true); );
    if (xml.scene == pano19, set(displaythebutton_buttonForASinglePano5, true); );

    if (displaythebutton_buttonForASinglePano5,
      set(layer[buttonForASinglePano5].visible, true);
    ,
      hidebuttonForASinglePano5();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonplayfilm1x1 -->
<!-- id : buttonForASinglePano6 -->
<!-- ********** -->

  <layer name="buttonForASinglePano6"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano6/playbutton2.jpg" 
         align="bottom"
         x="0"
         y="50"
         zorder="15"
         visible="false"
         onclick="buttonForASinglePano6OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano6tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano6OnClick">
            mainloadscene(pano217);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
hideTourControls();


  </action>

  <events name="buttonForASinglePano6events" 
    onTourStart="showbuttonForASinglePano6();"

    onPanoStart="showbuttonForASinglePano6();"

    keep="true" />
  <action name="hidebuttonForASinglePano6">set(layer[buttonForASinglePano6].visible, false);</action>
  <action name="showbuttonForASinglePano6">
    set(displaythebutton_buttonForASinglePano6, false);


    if (xml.scene == pano15, set(displaythebutton_buttonForASinglePano6, true); );

    if (displaythebutton_buttonForASinglePano6,
      set(layer[buttonForASinglePano6].visible, true);
    ,
      hidebuttonForASinglePano6();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonback2start -->
<!-- id : buttonForASinglePano7 -->
<!-- ********** -->

  <layer name="buttonForASinglePano7"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano7/stopbutton2.jpg" 
         align="bottom"
         x="-450"
         y="50"
         zorder="16"
         visible="false"
         onclick="buttonForASinglePano7OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano7tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano7OnClick">
          mainloadscene(pano15);lookat(0.000000, 0.000000, 35.694400);
hideTourControls();


  </action>

  <events name="buttonForASinglePano7events" 
    onTourStart="showbuttonForASinglePano7();"

    onPanoStart="showbuttonForASinglePano7();"

    keep="true" />
  <action name="hidebuttonForASinglePano7">set(layer[buttonForASinglePano7].visible, false);</action>
  <action name="showbuttonForASinglePano7">
    set(displaythebutton_buttonForASinglePano7, false);


    if (xml.scene == pano217, set(displaythebutton_buttonForASinglePano7, true); );

    if (displaythebutton_buttonForASinglePano7,
      set(layer[buttonForASinglePano7].visible, true);
    ,
      hidebuttonForASinglePano7();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonback2start1 -->
<!-- id : buttonForASinglePano8 -->
<!-- ********** -->

  <layer name="buttonForASinglePano8"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano8/home2.jpg" 
         align="bottom"
         x="-570"
         y="50"
         zorder="17"
         visible="false"
         onclick="buttonForASinglePano8OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano8tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano8OnClick">
          mainloadscene(pano128);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
hideTourControls();


  </action>

  <events name="buttonForASinglePano8events" 
    onTourStart="showbuttonForASinglePano8();"

    onPanoStart="showbuttonForASinglePano8();"

    keep="true" />
  <action name="hidebuttonForASinglePano8">set(layer[buttonForASinglePano8].visible, false);</action>
  <action name="showbuttonForASinglePano8">
    set(displaythebutton_buttonForASinglePano8, false);


    if (xml.scene == pano217, set(displaythebutton_buttonForASinglePano8, true); );

    if (displaythebutton_buttonForASinglePano8,
      set(layer[buttonForASinglePano8].visible, true);
    ,
      hidebuttonForASinglePano8();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonresetvideo -->
<!-- id : buttonForASinglePano9 -->
<!-- ********** -->

  <layer name="buttonForASinglePano9"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano9/resetbutton3.jpg" 
         align="bottom"
         x="-330"
         y="50"
         zorder="18"
         visible="false"
         onclick="buttonForASinglePano9OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano9tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="100"
         />
  <action name="buttonForASinglePano9OnClick">if(plugin[get(videointerface_video)] AND scene[get(xml.scene)].video == true,
	videointerface_seek(0);
);hideTourControls();


  </action>

  <events name="buttonForASinglePano9events" 
    onTourStart="showbuttonForASinglePano9();"

    onPanoStart="showbuttonForASinglePano9();"

    keep="true" />
  <action name="hidebuttonForASinglePano9">set(layer[buttonForASinglePano9].visible, false);</action>
  <action name="showbuttonForASinglePano9">
    set(displaythebutton_buttonForASinglePano9, false);


    if (xml.scene == pano217, set(displaythebutton_buttonForASinglePano9, true); );

    if (displaythebutton_buttonForASinglePano9,
      set(layer[buttonForASinglePano9].visible, true);
    ,
      hidebuttonForASinglePano9();
    );
  </action>



<!-- ********** -->
<!-- Singlebuttonpausevideo -->
<!-- id : buttonForASinglePano10 -->
<!-- ********** -->

  <layer name="buttonForASinglePano10"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano10/pausebutton1.jpg" 
         align="bottom"
         x="0"
         y="50"
         zorder="19"
         visible="false"
         onclick="buttonForASinglePano10OnClick"
         alpha="0.7"
         tooltip="buttonForASinglePano10tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="20"
         width="500"
         />
  <action name="buttonForASinglePano10OnClick">if(plugin[get(videointerface_video)] AND scene[get(xml.scene)].video == true,
	videointerface_togglepause();
);

  </action>

  <events name="buttonForASinglePano10events" 
    onTourStart="showbuttonForASinglePano10();"

    onPanoStart="showbuttonForASinglePano10();"

    keep="true" />
  <action name="hidebuttonForASinglePano10">set(layer[buttonForASinglePano10].visible, false);</action>
  <action name="showbuttonForASinglePano10">
    set(displaythebutton_buttonForASinglePano10, false);


    if (xml.scene == pano217, set(displaythebutton_buttonForASinglePano10, true); );

    if (displaythebutton_buttonForASinglePano10,
      set(layer[buttonForASinglePano10].visible, true);
    ,
      hidebuttonForASinglePano10();
    );
  </action>



  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url="%SWFPATH%/graphics/soundinterface.swf"
          alturl="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
           ,
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    pauseVideoSceneSound();
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
          );
        );
      );
      resumeVideoSceneSound();
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        resumeVideoSceneSound();
      );
    );
  </action>
  <action name="resumeVideoSceneSound">
    if(scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == false,
      videointerface_start_sound();
    );
  </action>
  <action name="pauseVideoSceneSound">
    if(scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == false,
      videointerface_stop_sound();
    );
  </action>
  <action name="preloadSounds">
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          div(volume, tour_soundsvolume, 100);
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        );
      );
    );
  </action>

</krpano>